package main

import (
	"context"
	"log"
	"net"

	pb "sunny-server/grpc-hello/proto"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

const (
	// Port ที่ server
	port = ":50051"
)

// Struct server use for implement Greeter service
type server struct {
	// Embedding UnimplementedGreeterServer
	// to ensure that server implements
	// all methods in GreeterServer
	pb.UnimplementedGreeterServer
}

// Implement SayHello method
// Receive Context and HelloRequest as input
// Return HelloReply or error
func (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {
	// .GetName() is a method generated by protoc-gen-go
	// to get the value of Name field in HelloRequest
	log.Printf("Received: %v", in.GetName())

	if len(in.GetName()) == 0 {
		return nil, status.Error(codes.InvalidArgument, "Name is required")
	}

	// reply with HelloReply
	return &pb.HelloReply{Message: "Hello " + in.GetName()}, nil
}

func main() {
	// create TCP listener on port
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}

	// create gRPC server instance
	grpcServer := grpc.NewServer()

	// Register Greeter service to gRPC server
	pb.RegisterGreeterServer(grpcServer, &server{})

	log.Printf("Server is listening on port %v", port)

	if err := grpcServer.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
